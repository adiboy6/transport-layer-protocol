#!/usr/bin/python -u

import sys
import socket
import time
import datetime
import select
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
# If there was a specified port number, connect to it.
if (len(sys.argv) == 2):
  # Connect only if an integer value was given, otherwise throw an error and print to console.
  try:
    UDP_PORT = int(sys.argv[1])
  except:
    sys.exit("Error - The port number must be an integer.")
elif (len(sys.argv) == 1):
  UDP_PORT = 0
# If there are any other amounts of arguments, throw a usage error and print to console.
else:
  sys.exit("Usage: ./3700recv <port>")

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Set up dictionary.
data_dict = {}
sequence = []

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Now listen for packets
while True:
  try:
    result = sock.recvfrom(MSG_SIZE)
    if result:
      (data, addr) = result
      try:
        decoded = data.decode("ascii")
        decoded = json.loads(decoded)
        if decoded['eof']:
          log("[completed]")
          final_answer = ""
          for ii in sorted(data_dict):
            final_answer += str(data_dict[ii])
          sys.stdout.write(final_answer)
          for i in range(11):
            try:
              sock.sendto("BYE", addr)
            except socket.error as e:
              log("[error] Socket error during sendto: {}".format(e))
          sys.exit(0)
        if decoded['data']:
          data_dict[decoded['sequence']] = decoded['data']
          log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
        msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])}, ensure_ascii=False)
        log("ABOUT TO SEND " + msg)
        try:
          if sock.sendto(msg, addr) < len(msg):
            log("[error] unable to fully send packet")
        except socket.error as e:
          log("[error] Socket error during sendto: {}".format(e))
      except (ValueError, KeyError, TypeError) as e:
        log("[recv corrupt packet]")
        raise e
    else:
      log("[error] timeout")
      sys.exit(-1)
  except socket.error as e:
    log("[error] Socket error during recvfrom: {}".format(e))
    sys.exit(-1)