#!/usr/bin/python3 -u
#

import sys
import socket
import datetime
import json

MSG_SIZE = 1500
TIMEOUT = 30
FIN = 5

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

# Bind to localhost and a port
UDP_IP = "127.0.0.1"
# If there was a specified port number, connect to it.
if (len(sys.argv) == 2):
  # Connect only if an integer value was given, otherwise throw an error and print to console.
  try:
    UDP_PORT = int(sys.argv[1])
  except:
    sys.exit("Error - The port number must be an integer.")
elif (len(sys.argv) == 1):
  UDP_PORT = 0
# If there are any other amounts of arguments
else:
  sys.exit(1)

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

log("[bound] " + str(UDP_PORT))

read_data = 0
recv_packets = []

while True:
  result = sock.recvfrom(MSG_SIZE)

  # hit the timeout if sender is not ready
  if result:
    (data, address) = result
    data = data.decode("ascii")
    try:
      decoded = json.loads(data)

      # Exit if EOF flag is set.
      if decoded['eof']:
        if decoded['sequence'] == read_data:
          log("[completed]")
          for i in range(FIN):
            # Send back an 'ack' to the sender.
            msg = json.dumps({'ack': decoded['sequence'], 'sack': decoded['sequence']})
            if sock.sendto(msg.encode("ascii"), address) < len(msg):
              log("[error] unable to fully send packet")
          sys.exit(0)
      else:
        if decoded['data']:
          seq_num = decoded['sequence']
          buffered_seq_num = list(map(lambda packet: packet['sequence'], recv_packets))
          if seq_num >= read_data and not seq_num in buffered_seq_num:
            if seq_num == read_data:
              log(f"[recv data] {seq_num} ({len(decoded['data'])}) ACCEPTED (in-order)")
            else:
              log(f"[recv data] {seq_num} ({len(decoded['data'])}) ACCEPTED (out-of-order)")
            recv_packets.append(decoded)
          else:
            log("IGNORED")

        sorted_packets = sorted(recv_packets, key=lambda packet: packet['sequence'])
        for packet in sorted_packets:
          if packet['sequence'] == read_data:
            sys.stdout.write(packet['data'])
            read_data = packet['sequence'] + len(packet['data'])
        recv_packets = list(filter(lambda packet: packet['sequence'] > read_data, sorted_packets))

        # Send back an 'ack' to the sender.
        msg = json.dumps({'ack': read_data, 'sack': decoded['sequence']})
        if sock.sendto(msg.encode("ascii"), address) < len(msg):
          log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as exc:
      log("[recv corrupt packet]")
      raise exc
  else:
    log("[error] timeout")
    sys.exit(1)